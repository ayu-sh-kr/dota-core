import {HelperUtils} from "@dota/core/helper";
import {EventDetails} from "@dota/core/types";


/**
 * A property decorator that defines an event emitter on a custom element.
 *
 * The `EventDecorator` function is used to define an event emitter property on a custom element.
 * It stores the event details in a metadata store associated with the target class.
 * The event name is generated by capitalizing the property name and prefixing it with 'on'.
 *
 * @returns {PropertyDecorator} - A property decorator function that defines an event emitter.
 *
 * @example
 * // Example of using EventDecorator to define an event emitter on a custom element
 * class MyElement extends HTMLElement {
 *   \@EventDecorator()
 *   public myEvent: EventEmitter;
 * }
 *
 * // The event emitter is now defined and can be used to emit events
 * const element = new MyElement();
 * element.myEvent.emit('someEvent', { detail: 'event data' });
 */
function EventDecorator(): PropertyDecorator {
    return function (target: any, propertyKey: string | symbol) {

        let data = HelperUtils.fetchOrCreate<EventDetails>(target, 'Output')

        const event = `on${capitalize(propertyKey.toString())}`

        const details: EventDetails = {eventName: event, propertyName: propertyKey.toString()}

        data.set(propertyKey.toString(), details);
    }
}

/**
 * Capitalizes the first letter of a string.
 *
 * @param {string} str - The string to capitalize.
 * @returns {string} - The capitalized string.
 */
function capitalize(str: string): string {
    return str.charAt(0).toUpperCase() + str.slice(1);
}

export {EventDecorator as Emitter, capitalize}